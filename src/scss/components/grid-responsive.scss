@if ($o-grid-is-responsive and not $o-grid-is-fixed-desktop) {
	/* Override fixed defaults for responsive grid */
	@media screen {

		.o-grid-row .o-grid-row,
		.o-grid-box .o-grid-row {
			margin-left: -$o-grid-responsive-half-gutter;
			margin-right: -$o-grid-responsive-half-gutter;
			width: auto;
		}
		
		@include oGridTargetAtFixedLayout(true) {
			.o-grid-row.o-grid-row-compact,
			.o-grid-row .o-grid-row.o-grid-row-compact {
				margin-left: 0;
				margin-right: 0;
			}
		}

		[class*="o-grid-col"] {
			float: left;
			padding-left: $o-grid-responsive-half-gutter;
			padding-right: $o-grid-responsive-half-gutter;
			@include oGridBoxSizing(border-box);
		}

		.o-grid-row-compact > [class*="o-grid-col"] {
			padding-left: 0;
			padding-right: 0;
		}

		// Following rules undo styles applied by the fixed grid
		@include oGridColumnSelector(s, 0 hide) {
		    display: block;
		}

		@include oGridColumnSelector(s, 12) {
		    clear: none;
		}

		$aggregatedSelector: null;			

		@for $colWidth from 0 through 12 {

			// generates a comma separated selector for each of the column widths from 1 to 11
			$aggregatedSelector: append($aggregatedSelector, oGridColumnSelector(s, $colWidth), comma);
			
		}

		#{$aggregatedSelector} {
			width: auto;
		}
	
		@include oGridAddGutterOverrides((), true);
	}

	@include oGridDefineLayout(default, null);

	@for $i from 1 through 4 {
		@include oGridDefineLayout(nth($_o-grid-layout-shorthands, $i), nth($_o-grid-max-widths, $i));
	}
}
