////
/// @group o-grid
/// @link http://registry.origami.ft.com/components/o-grid
////

/// Get the max width of a layout
///
/// @example
///  .my-large-container { width: oGridGetMaxWidthForLayout(L); }
///
/// @param {String} $size - one of $layouts
@function oGridGetMaxWidthForLayout($layout-name) {
	$index: index($_o-grid-layout-names, $layout-name);

	@if $index == length($_o-grid-layout-names) {
		@return $_o-grid-max-width;
	}

	$next-layout: nth($_o-grid-layout-names, $index + 1);
	@return map-get($o-grid-layouts, $next-layout);
}

/// % width of an element in the grid
///
/// @example
///  .one-half   { width: oGridColumnWidth(1/2); } // 50%
///  .one-half   { width: oGridColumnWidth(one-half); } // 50%
///  .sidebar    { width: oGridColumnWidth(5); } // 41.66667%
///  .two-thirds { width: oGridColumnWidth(2/3); } // 66.66667%
///  .4-out-of-6 { width: oGridColumnWidth(4, 6); } // 66.66667%
///
/// @param {Number | String} $span - Number of columns the element spans over
/// @param {Number} $total-cols [$o-grid-columns] - Number of columns in the grid
///
/// @returns {Number} width of the element in the grid, in percents
@function oGridColumnWidth($span, $total-cols: $o-grid-columns) {
	// Match the HTML helper API with human-friendly numbers
	@if $span == 'one-half'       { $span: 1/2; }
	@if $span == 'one-quarter'    { $span: 1/4; }
	@if $span == 'one-third'      { $span: 1/3; }
	@if $span == 'two-thirds'     { $span: 2/3; }
	@if $span == 'three-quarters' { $span: 3/4; }

	@if $span == 'full-width' {
		@return 100%;
	} @else {
		@if $span >= 1 {
			// A number of columns is supplied: converting it into a fraction
			// of the total number of columns
			@return percentage($span / $total-cols);
		} @else {
			// A fraction (1/2) or a number (0.5) is supplied:
			// converting it into a percentage
			@return percentage($span);
		}
	}

}

/// Apply styles at a given layout size
/// Wrapper for the Sass MQ mq() mixin
///
/// @link https://git.io/sass-mq sass-mq documentation
///
/// @example
///  // Turn the color of an element red at medium layout size and up
///  @include oGridRespondTo(M) {
///  	element {
///  		color: red;
///  	}
///  }
///  // Turn the color of an element blue until medium layout
///  element {
///  	@include oGridRespondTo($until: M) {
///  		color: blue;
///  	}
///  }
///  // Turn the color of an element green from small layout until medium layout
///  element {
///  	@include oGridRespondTo($from: S, $until: M) {
///  		color: green;
///  	}
///  }
///
/// @param {String} from - one of $o-grid-layouts
/// @param {String} until - one of $o-grid-layouts
@mixin oGridRespondTo($from: false, $until: false) {
	$grid-is-responsive: $o-grid-mode != 'fixed';

	@include mq(
		$from: $from,
		$until: $until,
		$responsive: $grid-is-responsive,
		$breakpoints: $o-grid-layouts,
		$static-breakpoint: $o-grid-fixed-layout
	) {
		@content;
	}
}

/// Target styles at IE 8 only
@mixin oGridTargetIE8 {
	@if 'inline' == $o-grid-ie8-rules {
		@media \0screen {
			@content;
		}
	}
	@if 'only' == $o-grid-ie8-rules {
		@content;
	}
}

/// Target styles at modern browsers that support @media queries properly
@mixin oGridTargetModernBrowsers {
	@if not ('only' == $o-grid-ie8-rules) {
		@media only screen {
			@content;
		}
	}
}


/// Human friendly names for portions:
///
/// - hide
/// - full-width
/// - one-half
/// - one-third
/// - two-thirds
/// - one-quarter
/// - three-quarters
///
/// @param {String} $layout-name [null]
@mixin oGridHumanFriendlyPortions($layout-name: null) {
	[data-o-grid-colspan~="#{$layout-name}hide"],
	[data-o-grid-colspan~="#{$layout-name}0"] {
		display: none;
	}
	@if $o-grid-enable-enhanced-experience {
		@each $human-friendly-name in (full-width, one-half, one-third, two-thirds, one-quarter, three-quarters) {
			[data-o-grid-colspan~="#{$layout-name}#{$human-friendly-name}"] {
				// Restore visibility from `display: none`
				// if `data-o-grid-colspan` was set to `0` or `hide`
				display: block;
				width: oGridColumnWidth($human-friendly-name);
			}
		}
	}
}

/// Base column styles for the enhanced experience
///
/// @example scss
///   el { @include oGridColumn; }
///   el { @include oGridColumn(4); }
///   el { @include oGridColumn(1/2); }
///   el { @include oGridColumn((default: 12, M: 8, L: hide)); }
///
/// @param {Number | Map} $layouts [null]
/// @param {String} $experience [null]
@mixin oGridColumn($span: null, $experience: null) {
	@if $experience == 'core' {
		padding-left: $o-grid-gutter / 2;
		padding-right: $o-grid-gutter / 2;
	}
	@if $o-grid-enable-enhanced-experience {
		@if $experience == 'enhanced' {
			float: left;
			box-sizing: border-box;
		}
	}
	@if $experience == null {
		@include oGridColumn($experience: 'core');

		@include oGridTargetIE8 {
			@include oGridColumn($experience: 'enhanced');
		}
		@include oGridTargetModernBrowsers {
			@include oGridColumn($experience: 'enhanced');
		}
	}
	@if $span {
		@include oGridColumnWidth($span);
	}
}

/// Cross browser column widths across layouts
///
/// @param {Number | Map} $span
@mixin oGridColumnWidth($span) {
	// Special case: the column is hidden by default
	@if $span == 'hide' {
		display: none;
	} @else {
		// $span is a number or a keyword, so we're outputting the default width for that column
		@if type-of($span) == number or type-of($span) == string {
			@include oGridTargetIE8 {
				width: oGridColumnWidth($span);
			}
			@include oGridTargetModernBrowsers {
				width: oGridColumnWidth($span);
			}
		}
	}

	// $span is a map, we're looping through all of the layouts
	@if type-of($span) == map {
		@each $layout-name, $layout-span in $span {
			@if $layout-name == 'default' {
				@if $layout-span == 'hide' {
					display: none;
				} @else {
					@include oGridTargetIE8 {
						display: block;
						width: oGridColumnWidth($layout-span);
					}
					@include oGridTargetModernBrowsers {
						display: block;
						width: oGridColumnWidth($layout-span);
					}
				}
			} @else {
				@if $layout-span == 'hide' {
					// Target IE8 only if the layout is smaller than the maximum width of the fixed layout
					@if index($_o-grid-layout-names, $layout-name) <= index($_o-grid-layout-names, $o-grid-fixed-layout) {
						@include oGridTargetIE8 {
							display: none;
						}
					}
					@include oGridRespondTo($layout-name) {
						display: none;
					}
				} @else {
					// Target IE8 only if the layout is smaller than the maximum width of the fixed layout
					@if index($_o-grid-layout-names, $layout-name) <= index($_o-grid-layout-names, $o-grid-fixed-layout) {
						@include oGridTargetIE8 {
							display: block;
							width: oGridColumnWidth($layout-span);
						}
					}
					@include oGridRespondTo($layout-name) {
						display: block;
						width: oGridColumnWidth($layout-span);
					}
				}
			}
		}
	}
}

/// Base row styles
///
/// @param {String} $experience [null]
/// @param {String} $grid-mode [$o-grid-mode]
/// @param {String} $selector [null] - e.g. '.o-grid-row'
@mixin oGridRow($experience: null, $grid-mode: $o-grid-mode, $selector: null) {
	// We build a core experience (usually: for browsers that don't cut the mustard)…
	@if $experience == 'core' {
		clear: both;
		min-width: $o-grid-min-width;
		// Older browsers get a fixed-width layout
		max-width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);
		padding-left: $o-grid-gutter / 2;
		padding-right: $o-grid-gutter / 2;
		box-sizing: border-box;
		margin-left: auto;
		margin-right: auto;

		// Clearfix
		zoom: 1;

		&:before,
		&:after {
			content: ' ';
			display: table;
		}
		&:after {
			clear: both;
		}

		// Nested rows overrides
		@if $selector {
			// Substract outer gutter space from nested rows
			// and restore fluidity
			#{unquote($selector)} {
				width: auto;
				min-width: 0;
				max-width: none;
				margin-left: -$o-grid-gutter / 2;
				margin-right: -$o-grid-gutter / 2;
				padding-left: 0;
				padding-right: 0;
			}
		}
	}

	// …and then build a better experience on top of it for modern browsers:
	@if $o-grid-enable-enhanced-experience {
		@if $experience == 'enhanced' {

			@if $grid-mode == 'fixed' {
				// If the grid isn't fluid, we set it to a certain width
				width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);
			} @else {
				max-width: $_o-grid-max-width;

				@each $layout-name in $_o-grid-layout-names {
					@if index($_o-grid-layout-names, $layout-name) >= index($_o-grid-layout-names, $o-grid-start-snappy-mode-at) {
						@include oGridRespondTo($layout-name) {
							// If the grid mode is snappy, all rows should be snappy
							@if $grid-mode == 'snappy' {
								max-width: map-get($o-grid-layouts, $layout-name);
							}
							@if $grid-mode == 'fluid' {
								// If the grid mode is fluid, then use a class to make a row or a set of rows snappy
								@at-root .o-grid-snappy {
									max-width: map-get($o-grid-layouts, $layout-name);
								}
							}
						}
					}
				}
			}
		}
	}

	@if $experience == null {
		@include oGridRow($experience: 'core', $grid-mode: $grid-mode, $selector: $selector);

		@include oGridTargetIE8 {
			@include oGridRow($experience: 'enhanced', $grid-mode: 'fixed', $selector: $selector);
		}
		@include oGridTargetModernBrowsers {
			@include oGridRow($experience: 'enhanced', $grid-mode: $grid-mode, $selector: $selector);
		}
	}
}

/// Columns and rows base structure
///
/// @param {String} $experience [null]
@mixin oGridLayout($experience: null, $grid-mode: $o-grid-mode) {
	@if $experience == 'core' or $experience == null {
		// Basic layout styles
		.o-grid-row {
			@include oGridRow($experience: 'core', $selector: '.o-grid-row');
		}
		[data-o-grid-colspan] {
			@include oGridColumn($experience: 'core');
		}
		// one-half, one-third, three-quarters…
		@include oGridHumanFriendlyPortions;
	}
	@if $o-grid-enable-enhanced-experience {
		@if $experience == 'enhanced' or $experience == null {
			.o-grid-row {
				@include oGridRow($experience: 'enhanced', $grid-mode: $grid-mode);
			}

			// If the grid is fluid, use this class to enable snappy mode on a set of rows
			@if $grid-mode == 'fluid' {
				.o-grid-snappy {
					margin-left: auto;
					margin-right: auto;
				}
			}

			[data-o-grid-colspan] {
				@include oGridColumn($experience: 'enhanced');
			}
			@for $colspan from 1 through $o-grid-columns {
				[data-o-grid-colspan~="#{$colspan}"] {
					width: oGridColumnWidth($colspan, $o-grid-columns);
				}
			}
			// Compact, gutterless row of columns
			.o-grid-row-compact, // Deprecated, here for retrocompatibility
			.o-grid-row--compact {
				&,
				> [data-o-grid-colspan] {
					@include oGridRemoveGutters;
				}
			}

			// Gutter helpers:
			// Remove gutters on a row or a column, across all layouts
			.o-grid-remove-gutters,
			.o-grid-remove-gutters--left {
				@include oGridRemoveGutters('left');
			}
			.o-grid-remove-gutters,
			.o-grid-remove-gutters--right {
				@include oGridRemoveGutters('right');
			}
		}
	}
}

/// Remove gutters from a column and re-align its child rows
///
/// @param {String} $side [null] - left, right
@mixin oGridRemoveGutters($side: null) {
	@if $o-grid-enable-enhanced-experience {
		@if $side == null or $side == 'left' {
			padding-left: 0;

			.o-grid-row {
				margin-left: 0;
			}
		}
		@if $side == null or $side == 'right' {
			padding-right: 0;

			.o-grid-row {
				margin-right: 0;
			}
		}
	}
}

/// Width and gutter removal modifiers for a given layout.
///
/// @output
///  [data-o-grid-colspan~="S1"] { width: %; }
///  .o-grid-remove-gutters--S { … }
///
/// @param {String} $layout-name - One of $o-grid-layouts
@mixin oGridModifiersForLayout($layout-name) {
	@if $o-grid-enable-enhanced-experience {
		@include oGridHumanFriendlyPortions($layout-name);

		@for $colspan from 1 through $o-grid-columns {
			[data-o-grid-colspan~="#{$layout-name}#{$colspan}"] {
				// Restore visibility from `display: none`
				// if `data-o-grid-colspan` was set to `0` or `hide`
				display: block;

				// Apply width in %
				width: oGridColumnWidth($colspan, $o-grid-columns);
			}
		}

		// Gutter helpers:
		// Remove gutters on a row or a column for a given layout
		// Examples:
		//  <div class="o-row o-grid-remove-gutters--S"></div>
		//  <div data-o-grid-colspan="6" class="o-grid-remove-gutters--left--S"></div>
		.o-grid-remove-gutters--#{$layout-name},
		.o-grid-remove-gutters--left--#{$layout-name} {
			@include oGridRemoveGutters('left');
		}
		.o-grid-remove-gutters--#{$layout-name},
		.o-grid-remove-gutters--right--#{$layout-name} {
			@include oGridRemoveGutters('right');
		}
	}
}


/// Generate the grid with helper classes for:
/// - older browsers (no columns, @media query support)
/// - IE 8 (fixed layout, with columns)
/// - modern browsers (fluid layout, with columns)
@mixin oGridGenerate {
	@include oGridLayout($experience: 'core');

	// Serve the enhanced layout to both IE 8 and modern browsers
	@include oGridTargetIE8 {
		@include oGridLayout($experience: 'enhanced', $grid-mode: 'fixed');
	}
	@include oGridTargetModernBrowsers {
		@include oGridLayout($experience: 'enhanced');
	}

	// For IE 8, output grid helper classes and data- attributes
	// for the layout defined in $o-grid-fixed-layout
	@include oGridTargetIE8 {
		.o-grid-row {
			width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);

			.o-grid-row {
				width: auto;
			}
		}

		// Output grid modifiers for layouts up to the fixed layout displayed by IE8
		$last-layout-index: index($_o-grid-layout-names, $o-grid-fixed-layout);
		@for $i from 1 through $last-layout-index {
			@include oGridModifiersForLayout(nth($_o-grid-layout-names, $i));
		}
	}

	// In browsers that support @media queries,
	// output grid helper classes and data- attributes for all layouts
	@each $layout-name in $_o-grid-layout-names {
		@include oGridRespondTo($layout-name) {
			@include oGridModifiersForLayout($layout-name);
		}
	}
}
