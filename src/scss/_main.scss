////
/// @group o-grid
/// @link http://registry.origami.ft.com/components/o-grid
////

/// Get the max width of a layout
///
/// @example
///  .my-large-container { width: oGridGetMaxWidthForLayout(L); }
///
/// @param {String} $size - one of $layouts
/// @param {Map} $layouts ($o-grid-layouts) - Map of layout names and sizes
///
/// @requires $o-grid-layouts
@function oGridGetMaxWidthForLayout($size, $layouts: $o-grid-layouts) {
	@return map-get($layouts, $size);
}

/// % width of an element in the grid
///
/// @example
///  .sidebar { width: oGridColumnWidth(5); } // 41.66667%
///  .4-out-of-6 { width: oGridColumnWidth(4, 6); } // 66.66667%
///
/// @param {Number} $colspan - Number of columns the element spans over
/// @param {Number} $total-cols ($o-grid-columns) - Number of columns in the grid
///
/// @requires $o-grid-columns
/// @returns {Number} width of the element in the grid, in percents
@function oGridColumnWidth($colspan, $total-cols: $o-grid-columns) {
	@return percentage($colspan / $total-cols);
}

/// Apply styles at a given layout size
///
/// @example
///  // Turn the color of an element red at small layout size only
///  @include oGridRespondTo(S) {
///  	element {
///  		color: red;
///  	}
///  }
///  // Hide an element at medium and extra-large layout sizes
///  @include oGridRespondTo(M XL) {
///  	element {
///  		display: none;
///  	}
///  }
///
/// @param {String | List} layout-names - one or many of $o-grid-layouts
///
/// @requires {Mixin} mq
/// @requires {Variable} $o-grid-layouts
/// @requires {Variable} $o-grid-is-fluid
/// @requires {Variable} $o-grid-fixed-layout
@mixin oGridRespondTo($layout-names) {
	@each $current-layout in $layout-names {
		@if map-has-key($o-grid-layouts, $current-layout) {
			$index: index($_o-grid-layout-names, $current-layout);
			$from: false;

			// Layout ends at its own max-width
			// e.g. L: 1100px will span up to 1100px (-1px)
			$until: $current-layout;

			// Layout starts from the previous layout's max-width
			// e.g. M goes from 600px (which is S layout's max width)
			@if $index > 1 {
				$previous-layout: nth($_o-grid-layout-names, $index - 1);
				$from: $previous-layout;
			}

			// And if this is the last (and largest) layout…
			$is-largest-layout: $index == length($o-grid-layouts);
			@if $is-largest-layout {
				$until: false;
			}

			@include mq(
				$from,
				$until,
				$responsive: $o-grid-is-fluid,
				$breakpoints: $o-grid-layouts,
				$static-breakpoint: $o-grid-fixed-layout
			) {
				@content;
			}
		} @else {
			@warn "Layout '#{$current-layout}' doesn't exist and must be one of $o-grid-layouts";
		}
	}
}

/// Target styles at IE 8 only
@mixin oGridTargetIE8 {
	@media \0screen {
		@content;
	}
}

/// Target styles at modern browsers that support @media queries properly
@mixin oGridTargetModernBrowsers {
	@media only screen {
		@content;
	}
}


/// Human friendly names for portions:
///
/// - hide
/// - full-width
/// - one-half / two-quarters
/// - one-third
/// - two-thirds
/// - one-quarter
/// - three-quarters
///
/// @param {String} $layout-name (null)
///
/// @requires {Function} oGridColumnWidth
/// @requires {Variable} $o-grid-columns
@mixin oGridHumanFriendlyPortions($layout-name: null) {
	[data-o-grid-colspan~="#{$layout-name}hide"],
	[data-o-grid-colspan~="#{$layout-name}0"] {
		display: none;
	}
	[data-o-grid-colspan~="#{$layout-name}full-width"] {
		// Restore visibility from `display: none`
		// if `data-o-grid-colspan` was set to `0` or `hide`
		display: block;

		// Naturally span across all available horizontal space
		width: auto;
	}
	[data-o-grid-colspan~="#{$layout-name}one-half"],
	[data-o-grid-colspan~="#{$layout-name}two-quarters"] {
		// Restore visibility from `display: none`
		// if `data-o-grid-colspan` was set to `0` or `hide`
		display: block;

		width: percentage(1 / 2);
	}
	[data-o-grid-colspan~="#{$layout-name}one-third"] {
		// Restore visibility from `display: none`
		// if `data-o-grid-colspan` was set to `0` or `hide`
		display: block;

		width: percentage(1 / 3);
	}
	[data-o-grid-colspan~="#{$layout-name}two-thirds"] {
		// Restore visibility from `display: none`
		// if `data-o-grid-colspan` was set to `0` or `hide`
		display: block;

		width: percentage(2 / 3);
	}
	[data-o-grid-colspan~="#{$layout-name}one-quarter"] {
		// Restore visibility from `display: none`
		// if `data-o-grid-colspan` was set to `0` or `hide`
		display: block;

		width: percentage(1 / 4);
	}
	[data-o-grid-colspan~="#{$layout-name}three-quarters"] {
		// Restore visibility from `display: none`
		// if `data-o-grid-colspan` was set to `0` or `hide`
		display: block;

		width: percentage(3 / 4);
	}
}

/// Base column styles for the enhanced experience
@mixin oGridColumn($experience: null) {
	@if $o-grid-enable-enhanced-experience == true {
		@if $experience == 'enhanced' or $experience == null {
			float: left;
			box-sizing: border-box;
			padding-left: $o-grid-gutter / 2;
			padding-right: $o-grid-gutter / 2;
		} @else {
			// For the core experience, columns should be stacked on top of each other
			@warn 'Columns should be stacked when the experience is other than "enhanced". Call the argument $experience: \'enhanced\'.';
		}
	}
}

/// Base row styles
@mixin oGridRow($experience: null) {
	// We build a core experience
	@if $experience == 'core' or $experience == null {
		clear: both;
		min-width: $o-grid-min-width;
		// Older browsers get a fixed-width layout
		max-width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);
		padding-left: $o-grid-gutter / 2;
		padding-right: $o-grid-gutter / 2;
		box-sizing: border-box;
		margin-left: auto;
		margin-right: auto;

		// Clearfix
		*zoom: 1;

		&:before,
		&:after {
			content: " ";
			display: table;
		}
		&:after {
			clear: both;
		}
	}
	@if $o-grid-enable-enhanced-experience == true {
		// Then we can build a better experience by overriding some defaults:
		@if $experience == 'enhanced' or $experience == null {
			// Set the maximum width to the largest layout available
			@if $o-grid-is-fluid {
				$largest-layout: nth($_o-grid-layout-names, -1);
				max-width: oGridGetMaxWidthForLayout($largest-layout);
			} @else {
				width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);
			}
		}
	}
}

/// Enhanced layout for modern browsers and IE 8
@mixin oGridEnhancedLayout {
	.o-grid-row {
		@include oGridRow('enhanced');

		@if $o-grid-is-fluid == false {
			// Restore fluidity of nested rows
			.o-grid-row {
				width: auto;
			}
		}
	}

	// one-half, one-third, three-quarters…
	@include oGridHumanFriendlyPortions;

	[data-o-grid-colspan] {
		@include oGridColumn('enhanced');
	}
	@for $colspan from 1 through $o-grid-columns {
		[data-o-grid-colspan~="#{$colspan}"] {
			width: oGridColumnWidth($colspan, $o-grid-columns);
		}
	}
}

/// Remove gutters from a column and re-align its child rows
/// @param {String} $side (null) - left, right
@mixin oGridRemoveGutters($side: null) {
	@if $side == null or $side == 'left' {
		padding-left: 0;

		.o-grid-row {
			margin-left: 0;
		}
	}
	@if $side == null or $side == 'right' {
		padding-right: 0;

		.o-grid-row {
			margin-right: 0;
		}
	}
}

/// Boilerplate grid styles for given layout
///
/// @param {String} $layout-name - One of $o-grid-layouts
///
/// @requires {Function} oGridColumnWidth
/// @requires {Mixin} oGridRemoveGutters
/// @requires {Variable} o-grid-columns
@mixin oGridStylesForLayout($layout-name) {
	@include oGridHumanFriendlyPortions($layout-name);

	@for $colspan from 1 through $o-grid-columns {
		[data-o-grid-colspan~="#{$layout-name}#{$colspan}"] {
			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			// Apply width in %
			width: oGridColumnWidth($colspan, $o-grid-columns);
		}
	}

	// Gutter helpers:
	// Remove gutters on a row or a column for a given layout
	// Examples:
	//  <div class="o-row o-grid-remove-gutters--S"></div>
	//  <div data-o-grid-colspan="6" class="o-grid-remove-gutters--left--S"></div>
	.o-grid-remove-gutters--#{$layout-name},
	.o-grid-remove-gutters--left--#{$layout-name} {
		@include oGridRemoveGutters('left');
	}
	.o-grid-remove-gutters--#{$layout-name},
	.o-grid-remove-gutters--right--#{$layout-name} {
		@include oGridRemoveGutters('right');
	}
}

@mixin oGridGenerate {
	// Basic layout styles
	.o-grid-row {
		@include oGridRow('core');

		// Substract gutter space from nested rows
		.o-grid-row {
			min-width: none;
			max-width: none;
			margin-left: -$o-grid-gutter / 2;
			margin-right: -$o-grid-gutter / 2;
			padding-left: 0;
			padding-right: 0;
		}
	}

	// Compact, gutterless row of columns
	.o-grid-row-compact, // Deprecated, here for retrocompatibility
	.o-grid-row--compact {
		&,
		> [data-o-grid-colspan] {
			@include oGridRemoveGutters;
		}
	}

	// Serve the enhanced layout to both IE 8 and modern browsers
	@include oGridTargetIE8 {
		@include oGridEnhancedLayout;
	}
	@include oGridTargetModernBrowsers {
		@include oGridEnhancedLayout;
	}

	// Gutter helpers:
	// Remove gutters on a row or a column, across all layouts
	.o-grid-remove-gutters,
	.o-grid-remove-gutters--left {
		@include oGridRemoveGutters('left');
	}
	.o-grid-remove-gutters,
	.o-grid-remove-gutters--right {
		@include oGridRemoveGutters('right');
	}

	// For IE 8, output grid helper classes and data- attributes
	// for the layout defined in $o-grid-fixed-layout
	@include oGridTargetIE8 {
		@include oGridStylesForLayout($o-grid-fixed-layout);
	}

	// In browsers that support @media queries,
	// output grid helper classes and data- attributes for all layouts
	@each $layout-name in $_o-grid-layout-names {
		@include oGridRespondTo($layout-name) {
			@include oGridStylesForLayout($layout-name);
		}
	}
}
