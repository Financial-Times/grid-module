////
/// @group o-grid
/// @link http://registry.origami.ft.com/components/o-grid
////

/// Get the max width of a layout
///
/// @example
///  .my-large-container { width: oGridGetMaxWidthForLayout(L); }
///
/// @param {String} $size - one of $layouts
///
/// @requires $o-grid-layouts
@function oGridGetMaxWidthForLayout($layout-name) {
	$index: index($_o-grid-layout-names, $layout-name);
	@if $index == length($_o-grid-layout-names) {
		@return $o-grid-max-width;
	}
	$next-layout: nth($_o-grid-layout-names, $index + 1);
	@return map-get($o-grid-layouts, $next-layout);
}

/// % width of an element in the grid
///
/// @example
///  .sidebar { width: oGridColumnWidth(5); } // 41.66667%
///  .4-out-of-6 { width: oGridColumnWidth(4, 6); } // 66.66667%
///
/// @param {Number} $colspan - Number of columns the element spans over
/// @param {Number} $total-cols ($o-grid-columns) - Number of columns in the grid
///
/// @requires $o-grid-columns
/// @returns {Number} width of the element in the grid, in percents
@function oGridColumnWidth($colspan, $total-cols: $o-grid-columns) {
	@return percentage($colspan / $total-cols);
}

/// Apply styles at a given layout size
/// Wrapper for the Sass MQ mq() mixin
///
/// @link https://git.io/sass-mq sass-mq documentation
///
/// @example
///  // Turn the color of an element red at medium layout size and up
///  @include oGridRespondTo(M) {
///  	element {
///  		color: red;
///  	}
///  }
///  // Turn the color of an element blue until medium layout
///  element {
///  	@include oGridRespondTo($until: M) {
///  		color: blue;
///  	}
///  }
///  // Turn the color of an element green from small layout until medium layout
///  element {
///  	@include oGridRespondTo($from: S, $until: M) {
///  		color: green;
///  	}
///  }
///
/// @param {String} from - one of $o-grid-layouts
/// @param {String} until - one of $o-grid-layouts
///
/// @requires {Mixin} mq
/// @requires {Variable} $o-grid-layouts
/// @requires {Variable} $o-grid-is-fluid
/// @requires {Variable} $o-grid-fixed-layout
@mixin oGridRespondTo($from: false, $until: false) {
	@include mq(
		$from: $from,
		$until: $until,
		$responsive: $o-grid-is-fluid,
		$breakpoints: $o-grid-layouts,
		$static-breakpoint: $o-grid-fixed-layout
	) {
		@content;
	}
}

/// Target styles at IE 8 only
@mixin oGridTargetIE8 {
	@media \0screen {
		@content;
	}
}

/// Target styles at modern browsers that support @media queries properly
@mixin oGridTargetModernBrowsers {
	@media only screen {
		@content;
	}
}


/// Human friendly names for portions:
///
/// - hide
/// - full-width
/// - one-half / two-quarters
/// - one-third
/// - two-thirds
/// - one-quarter
/// - three-quarters
///
/// @param {String} $layout-name (null)
///
/// @requires {Function} oGridColumnWidth
/// @requires {Variable} $o-grid-columns
@mixin oGridHumanFriendlyPortions($layout-name: null) {
	[data-o-grid-colspan~="#{$layout-name}hide"],
	[data-o-grid-colspan~="#{$layout-name}0"] {
		display: none;
	}
	@if $o-grid-enable-enhanced-experience {
		[data-o-grid-colspan~="#{$layout-name}full-width"] {
			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			// Naturally span across all available horizontal space
			width: auto;
		}
		[data-o-grid-colspan~="#{$layout-name}one-half"],
		[data-o-grid-colspan~="#{$layout-name}two-quarters"] {
			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			width: percentage(1 / 2);
		}
		[data-o-grid-colspan~="#{$layout-name}one-third"] {
			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			width: percentage(1 / 3);
		}
		[data-o-grid-colspan~="#{$layout-name}two-thirds"] {
			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			width: percentage(2 / 3);
		}
		[data-o-grid-colspan~="#{$layout-name}one-quarter"] {
			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			width: percentage(1 / 4);
		}
		[data-o-grid-colspan~="#{$layout-name}three-quarters"] {
			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			width: percentage(3 / 4);
		}
	}
}

/// Base column styles for the enhanced experience
///
/// @param {String} $experience (null)
@mixin oGridColumn($experience: null) {
	@if $experience == 'core' or $experience == null {
		padding-left: $o-grid-gutter / 2;
		padding-right: $o-grid-gutter / 2;
	}
	@if $o-grid-enable-enhanced-experience {
		@if $experience == 'enhanced' or $experience == null {
			float: left;
			box-sizing: border-box;
		}
	}
}

/// Base row styles
///
/// @param {String} $experience (null)
@mixin oGridRow($experience: null) {
	// We build a core experience
	@if $experience == 'core' or $experience == null {
		clear: both;
		min-width: $o-grid-min-width;
		// Older browsers get a fixed-width layout
		max-width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);
		padding-left: $o-grid-gutter / 2;
		padding-right: $o-grid-gutter / 2;
		box-sizing: border-box;
		margin-left: auto;
		margin-right: auto;

		// Clearfix
		zoom: 1;

		&:before,
		&:after {
			content: ' ';
			display: table;
		}
		&:after {
			clear: both;
		}
	}
	@if $o-grid-enable-enhanced-experience {
		// Then we can build a better experience by overriding some defaults:
		@if $experience == 'enhanced' or $experience == null {
			@if $o-grid-is-fluid {
				max-width: $o-grid-max-width;
			} @else {
				width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);
			}
		}
	}
}

/// Columns and rows base structure
///
/// @param {String} $experience (null)
@mixin oGridLayout($experience: null) {
	@if $experience == 'core' or $experience == null {
		// Basic layout styles
		.o-grid-row {
			@include oGridRow('core');

			// Substract gutter space from nested rows
			.o-grid-row {
				min-width: 0;
				max-width: none;
				margin-left: -$o-grid-gutter / 2;
				margin-right: -$o-grid-gutter / 2;
				padding-left: 0;
				padding-right: 0;
			}
		}
		[data-o-grid-colspan] {
			@include oGridColumn('core');
		}
		// one-half, one-third, three-quarters…
		@include oGridHumanFriendlyPortions;
	}
	@if $o-grid-enable-enhanced-experience {
		@if $experience == 'enhanced' or $experience == null {
			.o-grid-row {
				@include oGridRow('enhanced');

				@if $o-grid-is-fluid == false {
					// Restore fluidity of nested rows
					.o-grid-row {
						width: auto;
					}
				}
			}



			[data-o-grid-colspan] {
				@include oGridColumn('enhanced');
			}
			@for $colspan from 1 through $o-grid-columns {
				[data-o-grid-colspan~="#{$colspan}"] {
					width: oGridColumnWidth($colspan, $o-grid-columns);
				}
			}
			// Compact, gutterless row of columns
			.o-grid-row-compact, // Deprecated, here for retrocompatibility
			.o-grid-row--compact {
				&,
				> [data-o-grid-colspan] {
					@include oGridRemoveGutters;
				}
			}

			// Gutter helpers:
			// Remove gutters on a row or a column, across all layouts
			.o-grid-remove-gutters,
			.o-grid-remove-gutters--left {
				@include oGridRemoveGutters('left');
			}
			.o-grid-remove-gutters,
			.o-grid-remove-gutters--right {
				@include oGridRemoveGutters('right');
			}
		}
	}
}

/// Remove gutters from a column and re-align its child rows
/// @param {String} $side (null) - left, right
@mixin oGridRemoveGutters($side: null) {
	@if $o-grid-enable-enhanced-experience {
		@if $side == null or $side == 'left' {
			padding-left: 0;

			.o-grid-row {
				margin-left: 0;
			}
		}
		@if $side == null or $side == 'right' {
			padding-right: 0;

			.o-grid-row {
				margin-right: 0;
			}
		}
	}
}

/// Width and gutter removal modifiers for a given layout.
///
/// @output
///  [data-o-grid-colspan~="S1"] { width: %; }
///  .o-grid-remove-gutters--S { … }
///
/// @param {String} $layout-name - One of $o-grid-layouts
///
/// @requires {Function} oGridColumnWidth
/// @requires {Mixin} oGridRemoveGutters
/// @requires {Variable} o-grid-columns
@mixin oGridModifiersForLayout($layout-name) {
	@if $o-grid-enable-enhanced-experience {
		@include oGridHumanFriendlyPortions($layout-name);

		@for $colspan from 1 through $o-grid-columns {
			[data-o-grid-colspan~="#{$layout-name}#{$colspan}"] {
				// Restore visibility from `display: none`
				// if `data-o-grid-colspan` was set to `0` or `hide`
				display: block;

				// Apply width in %
				width: oGridColumnWidth($colspan, $o-grid-columns);
			}
		}

		// Gutter helpers:
		// Remove gutters on a row or a column for a given layout
		// Examples:
		//  <div class="o-row o-grid-remove-gutters--S"></div>
		//  <div data-o-grid-colspan="6" class="o-grid-remove-gutters--left--S"></div>
		.o-grid-remove-gutters--#{$layout-name},
		.o-grid-remove-gutters--left--#{$layout-name} {
			@include oGridRemoveGutters('left');
		}
		.o-grid-remove-gutters--#{$layout-name},
		.o-grid-remove-gutters--right--#{$layout-name} {
			@include oGridRemoveGutters('right');
		}
	}
}


/// Generate the grid with helper classes for:
/// - older browsers (no columns, @media query support)
/// - IE 8 (fixed layout, with columns)
/// - modern browsers (fluid layout, with columns)
///
/// @requires {Mixin} oGridLayout
/// @requires {Mixin} oGridRemoveGutters
/// @requires {Mixin} oGridTargetIE8
/// @requires {Mixin} oGridTargetModernBrowsers
/// @requires {Mixin} oGridRemoveGutters
/// @requires {Mixin} oGridModifiersForLayout
/// @requires {Mixin} oGridRespondTo
@mixin oGridGenerate {
	@include oGridLayout('core');

	// Serve the enhanced layout to both IE 8 and modern browsers
	@include oGridTargetIE8 {
		@include oGridLayout('enhanced');
	}
	@include oGridTargetModernBrowsers {
		@include oGridLayout('enhanced');
	}

	// For IE 8, output grid helper classes and data- attributes
	// for the layout defined in $o-grid-fixed-layout
	@include oGridTargetIE8 {
		.o-grid-row {
			width: oGridGetMaxWidthForLayout($o-grid-fixed-layout);

			.o-grid-row {
				width: auto;
			}
		}

		// Output grid modifiers for layouts up to the fixed layout displayed by IE8
		$last-layout-index: index($_o-grid-layout-names, $o-grid-fixed-layout);
		@for $i from 1 through $last-layout-index {
			@include oGridModifiersForLayout(nth($_o-grid-layout-names, $i));
		}
	}

	// In browsers that support @media queries,
	// output grid helper classes and data- attributes for all layouts
	@each $layout-name in $_o-grid-layout-names {
		@include oGridRespondTo($layout-name) {
			@include oGridModifiersForLayout($layout-name);
		}
	}
}
