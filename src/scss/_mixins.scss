//
// Wraps a given block of styles in the given selector (if it exists)
//
// @param $selector {string|null} css selector to wrap the styles in
//
@mixin wrapInSelector ($selector:null) {
	@if($selector) {
		#{$selector} { @content }
	} @else {
		@content
	}
}

//
// Writes media query selector for given maximum and minimum screen widths
//
// @param $min {string|null} min-width for media query
// @param $max {string|null} max-width for media query
// @param $force {boolean} [false] if set to true will then if $min and $max are undefined it will write out the styles wrapped in @media screen, otherwise writes nothing
//
@mixin maxMinMediaQuery($min, $max, $force:false) {
	@if ($min and $max) {
		@media screen and (min-#{$ft-grid-mq-type}:$min+1) and (max-#{$ft-grid-mq-type}:$max) { @content; }
	} @else if ($min) {
		@media screen and (min-#{$ft-grid-mq-type}:$min+1) { @content; }
	} @else if ($max) {
		@media screen and  (max-#{$ft-grid-mq-type}:$max) { @content; }
	} @else if ($force) {
		@media screen { @content; }
	}
}

// Add cross-browser box-sizing attribute
@mixin boxSizing($value) {
	-moz-box-sizing: $value;
	box-sizing: $value;
	*behavior: url(#{$ft-grid-path-to-polyfills}boxsizing.htc);
}

//
// Writes media query selector for a given layout size
//
// @param $layoutSizes {string|list} name[s] of layout size[s] (s, m , l, xl)
//
@mixin ftGridRespondTo ($layoutSizes) {

	@each $layoutSize in $layoutSizes {
		@if $layoutSize == $ft-grid-small {
			@include maxMinMediaQuery(null, $ft-grid-small-to-medium-break) { @content; }
		} @else if $layoutSize == $ft-grid-medium {
			@include maxMinMediaQuery($ft-grid-small-to-medium-break, $ft-grid-medium-to-large-break) { @content; }
		} @else if $layoutSize == $ft-grid-large {
			@include maxMinMediaQuery($ft-grid-medium-to-large-break, $ft-grid-large-to-extra-large-break) { @content; }
		} @else if $layoutSize == $ft-grid-extra-large {
			@include maxMinMediaQuery($ft-grid-large-to-extra-large-break, null) { @content; }
		} @else {
			@include maxMinMediaQuery(null, null, true) { @content; }
		}
	}
}

//
// Defines styles for row and column widths for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
// @param $maxWidth {number} maximum width of a row at this layout size
//
@mixin ftGridDefineLayout ($layoutSize, $maxWidth) {

	@include ftGridRespondTo($layoutSize) {
		
		@if ($ft-grid-is-fluid and not ($layoutSize == $ft-grid-extra-large)) {
			.#{$ft-grid-row},
			.#{$ft-grid-page} {
				max-width: none;
			}
		} @else {
			@if ($maxWidth) {
				.#{$ft-grid-row},
				.#{$ft-grid-page} {
					max-width: $maxWidth;
				}
			}
		}

		%ft-grid-no-gutter#{-$layoutSize},
		%ft-grid-no-left-gutter#{-$layoutSize} {
			padding-left: 0;
			&> .#{$ft-grid-row} {
				margin-left: 0;
			}
		}

		%ft-grid-no-gutter#{-$layoutSize},
		%ft-grid-no-right-gutter#{-$layoutSize} {
			padding-right: 0;
			&> .#{$ft-grid-row} {
				margin-right: 0;
			}
		}
		
		@include ftGridColumnWidths($layoutSize);
	}
}

//
// Defines styles for column widths for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
//
@mixin ftGridColumnWidths($layoutSize) {

	$placeholder-prefix: -#{$layoutSize};
	$attribute-prefix: #{#{"."}$layoutSize};

	@if ($layoutSize == $ft-grid-default) {
		$placeholder-prefix: "-";
		$attribute-prefix: ":";
	} 

	[class*=".#{$layoutSize}hide"],
	[class*=".#{$layoutSize}0"],
	%ft-grid-#{$layoutSize}0,
	%ft-grid-#{$layoutSize}hide {
		display: none;
	}

	$aggregatedSelector: null;			

	@for $colWidth from 1 through 11 {

		$attrSelector: #{'[class*="#{$attribute-prefix}#{$colWidth}"]'};
		$placeholderSelector: #{'%ft-grid#{$placeholder-prefix}#{$colWidth}'};

		
		#{$attrSelector},
		#{$placeholderSelector} {
			width: ftGridColumnWidth($colWidth);
		}
		
		// generates a comma separated selector for each of the column widths from 1 to 11
		@if ($aggregatedSelector) {
			$aggregatedSelector: append($aggregatedSelector, $attrSelector, comma);
			$aggregatedSelector: append($aggregatedSelector, $placeholderSelector, comma);
		} @else {
			$aggregatedSelector: $attrSelector, $placeholderSelector;
		}
		
	}
	
	@if ($layoutSize != $ft-grid-default) {
		/* ensures d12 and d0 can be over-ridden by styles for #{$layoutSize} layout */
		#{$aggregatedSelector} {
			float: left;
			clear: none;
			display: block;	
		}
	}

	[class*="#{$attribute-prefix}12"],
	%ft-grid#{$placeholder-prefix}12 {
	    float: none;
	    clear: both;
		width: 100%;
	}
}


