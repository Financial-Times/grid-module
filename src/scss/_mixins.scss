//
// Wraps a given block of styles in the given selector (if it exists)
//
// @param $selector {string|null} css selector to wrap the styles in
//
@mixin oGridWrapInSelector ($selector:null, $alwaysOutputPlainToo: false) {
	@if (not $selector or $alwaysOutputPlainToo) {
		@content
	}
	@if($selector) {
		#{$selector} { @content }
	} 
}

//
// Writes media query selector for given maximum and minimum screen widths
//
// @param $min {string|null} min-width for media query
// @param $max {string|null} max-width for media query
// @param $force {boolean} [false] if set to true will then if $min and $max are undefined it will write out the styles wrapped in @media screen, otherwise writes nothing
//
@mixin oGridMaxMinMediaQuery($min, $max, $force:false) {
	@if ($min and $max) {
		@media screen and (min-#{$o-grid-mq-type}:$min+1) and (max-#{$o-grid-mq-type}:$max) { @content; }
	} @else if ($min) {
		@media screen and (min-#{$o-grid-mq-type}:$min+1) { @content; }
	} @else if ($max) {
		@media screen and  (max-#{$o-grid-mq-type}:$max) { @content; }
	} @else if ($force) {
		@media screen { @content; }
	}
}

// Add cross-browser box-sizing attribute
@mixin oGridBoxSizing($value) {
	-moz-box-sizing: $value;
	box-sizing: $value;
	@include oUseragentIe7BoxSizing();
}

//
// Writes media query selector for a given layout size
//
// @param $layoutSizes {string|list} name[s] of layout size[s] (s, m , l, xl)
//
@mixin oGridRespondTo ($layoutSizes) {

	@each $layoutSize in $layoutSizes {
		@if $layoutSize == s {
			@include oGridMaxMinMediaQuery(null, $o-grid-small-to-medium-break) { @content; }
		} @else if $layoutSize == m {
			@include oGridMaxMinMediaQuery($o-grid-small-to-medium-break, $o-grid-medium-to-large-break) { @content; }
		} @else if $layoutSize == l {
			@include oGridMaxMinMediaQuery($o-grid-medium-to-large-break, $o-grid-large-to-extra-large-break) { @content; }
		} @else if $layoutSize == xl {
			@include oGridMaxMinMediaQuery($o-grid-large-to-extra-large-break, null) { @content; }
		} @else {
			@include oGridMaxMinMediaQuery(null, null, true) { @content; }
		}
	}
}

//
// Defines styles for row and column widths for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
// @param $maxWidth {number} maximum width of a row at this layout size
//
@mixin oGridDefineLayout ($layoutSize, $maxWidth) {

	@include oGridRespondTo($layoutSize) {
		
		@if ($o-grid-is-fluid and not ($layoutSize == xl)) {
			.o-grid-row,
			.o-grid-page {
				max-width: none;
			}
		} @else {
			@if ($maxWidth) {
				.o-grid-row,
				.o-grid-page {
					max-width: $maxWidth;
				}
			}
		}

		%o-grid-no-gutter#{-$layoutSize},
		%o-grid-no-left-gutter#{-$layoutSize} {
			padding-left: 0;
			&> .o-grid-row {
				margin-left: 0;
			}
		}

		%o-grid-no-gutter#{-$layoutSize},
		%o-grid-no-right-gutter#{-$layoutSize} {
			padding-right: 0;
			&> .o-grid-row {
				margin-right: 0;
			}
		}
		
		@include oGridColumnWidths($layoutSize);
	}
}

//
// Defines styles for column widths for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
//
@mixin oGridColumnWidths($layoutSize) {

	$prefix: $layoutSize;

	@if ($layoutSize == default) {
		$prefix: "";
	} 

	[class*="|#{$prefix}hide|"],
	[class*="|#{$prefix}0|"],
	%o-grid-#{$prefix}0,
	%o-grid-#{$prefix}hide {
		display: none;
	}

	$aggregatedSelector: null;			

	@for $colWidth from 1 through 11 {

		$attrSelector: #{'[class*="|#{$prefix}#{$colWidth}|"]'};
		$placeholderSelector: #{'%o-grid-#{$prefix}#{$colWidth}'};

		
		#{$attrSelector},
		#{$placeholderSelector} {
			width: oGridColumnWidth($colWidth);
		}
		
		// generates a comma separated selector for each of the column widths from 1 to 11
		@if ($aggregatedSelector) {
			$aggregatedSelector: append($aggregatedSelector, $attrSelector, comma);
			$aggregatedSelector: append($aggregatedSelector, $placeholderSelector, comma);
		} @else {
			$aggregatedSelector: $attrSelector, $placeholderSelector;
		}
		
	}
	
	@if ($layoutSize != default) {
		/* ensures d12 and d0 can be over-ridden by styles for #{$layoutSize} layout */
		#{$aggregatedSelector} {
			float: left;
			clear: none;
			display: block;	
		}
	}

	[class*="|#{$prefix}12|"],
	%o-grid-#{$prefix}12 {
	    float: none;
	    clear: both;
		width: 100%;
	}
}

@mixin oGridTargetAtFixedLayout () {
	@if ($o-grid-fixed-layout-useragents) {
		@include oUseragentTarget ($o-grid-fixed-layout-useragents) {
			@content;
		}	
	} @else {
		@include oGridWrapInSelector ($o-grid-fixed-layout-selector) {
			@content;
		}		
	}
}

@mixin oGridFixedGridStyles () {
	.o-grid-row .o-grid-row,
	.o-grid-box .o-grid-row {
		margin-left: -$o-grid-fixed-half-gutter;
		margin-right: -$o-grid-fixed-half-gutter;
		width: auto;
	}

	.o-grid-row.o-grid-row-compact,
	.o-grid-row .o-grid-row.o-grid-row-compact {
		margin-left: 0;
		margin-right: 0;
	}

	[class*="o-grid-col"] {
		float: left;
		padding-left: $o-grid-fixed-half-gutter;
		padding-right: $o-grid-fixed-half-gutter;
		@include oGridBoxSizing(border-box);
	}

	.o-grid-row-compact > [class*="o-grid-col"] {
		padding-left: 0;
		padding-right: 0;
	}

	@include oGridColumnWidths(default);
	@include oGridColumnWidths(l);

	.o-grid-row,
	.o-grid-page {
		width: $o-grid-large-max-width;
		max-width: none; // must be 'none' rather than $o-grid-large-max-width in order to avoid a very obscure ie7 bug
	}
	
	[class*="|s12|"],
	%o-grid-s12 {
		clear: none;
	}
	
	%o-grid-no-gutter,
	%o-grid-no-gutter-l,
	%o-grid-no-left-gutter,
	%o-grid-no-left-gutter-l {
		padding-left: 0;

		&> .o-grid-row {
			margin-left: 0;
		}
	}

	%o-grid-no-gutter,
	%o-grid-no-gutter-l,
	%o-grid-no-right-gutter,
	%o-grid-no-right-gutter-l {
		padding-right: 0;

		&> .o-grid-row {
			margin-right: 0;
		}
	}
}


