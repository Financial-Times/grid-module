//
// Wraps a given block of styles in the given selector (if it exists)
//
// @param $selector {string|null} css selector to wrap the styles in
//
@mixin wrapInSelector ($selector:null) {
	@if($selector) {
		#{$selector} { @content }
	} @else {
		@content
	}
}

//
// Writes media query selector for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
//
@mixin respondTo ($layoutSize) {
	@if $layoutSize == $small {
		@include maxMinMediaQuery(null, $smallToMediumBreak) { @content; }
	} @else if $layoutSize == $medium {
		@include maxMinMediaQuery($smallToMediumBreak, $mediumToLargeBreak) { @content; }
	} @else if $layoutSize == $large {
		@include maxMinMediaQuery($mediumToLargeBreak, $largeToXLBreak) { @content; }
	} @else if $layoutSize == $extraLarge {
		@include maxMinMediaQuery($largeToXLBreak, null) { @content; }
	} @else {
		@include maxMinMediaQuery(null, null, true) { @content; }
	}
}

//
// Writes media query selector for given maximum and minimum screen widths
//
// @param $min {string|null} min-width for media query
// @param $max {string|null} max-width for media query
// @param $force {boolean} [false] if set to true will write out the styles wrapped in @media screen, otherwise writes nothing
//
@mixin maxMinMediaQuery($min, $max, $force:false) {
	@if ($min and $max) {
		@media screen and (min-width:$min+1) and (max-width:$max) { @content; }
	} @else if ($min) {
		@media screen and (min-width:$min+1) { @content; }
	} @else if ($max) {
		@media screen and  (max-width:$max) { @content; }
	} @else if ($force) {
		@media screen { @content; }
	}
}

//
// Defines styles for row and column widths for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
// @param $maxWidth {number} maximum width of a row at this layout size
//
@mixin defineResponsiveGrid ($layoutSize, $maxWidth) {

	@include respondTo($layoutSize) {
		
		@if ($isFluid and not ($layoutSize == $extraLarge)) {
			.#{$gridRow} {
				max-width: none;
			}
		} @else {
			@if ($maxWidth) {
				.#{$gridRow} {
					max-width: $maxWidth;
				}
			}
		}
		
		@include columnWidths($layoutSize);
	}
}

//
// Defines styles for column widths for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
//
@mixin columnWidths($layoutSize) {

	[class*="-#{$layoutSize}hide"],
	[class*="-#{$layoutSize}0"] {
		display: none;
	}

	$selector: null;			

	@for $colWidth from 1 through 11 {

		$thisSelector: #{'[class*="-#{$layoutSize}#{$colWidth}"]'};
		
		#{$thisSelector} {
			width: gridColumnWidth($colWidth);
		}
		
		// generates a comma separated selector for each of the column widths from 1 to 11
		@if ($selector) {
			$selector: append($selector, $thisSelector, comma);
		} @else {
			$selector: $thisSelector;
		}
		
	}
	
	@if ($layoutSize != $default) {
		/* ensures d12 and d0 can be over-ridden by styles for #{$layoutSize} layout */
		#{$selector} {
			float: left;
			clear: none;
			display: block;	
		}
	}

	[class*="-#{$layoutSize}12"]{
	    float: none;
	    clear: both;
		width: 100%;
	}
}
