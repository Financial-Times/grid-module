

@mixin wrapInSelector ($selector) {
	@if($selector) {
		#{$selector} { @content }
	} @else {
		@content
	}
}
//
// Writes media query selector for given a layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
//
@mixin respondTo ($layoutSize) {
	@if $layoutSize == $small {
		@media screen and (max-width:$smallToMediumBreak) { @content; }
	} @else if $layoutSize == $medium {
		@media screen and (min-width:$smallToMediumBreak) and (max-width:$mediumToLargeBreak) { @content; }
	} @else if $layoutSize == $large {
		@media screen and (min-width:$mediumToLargeBreak) and (max-width:$largeToXLBreak) { @content; }
	} @else if $layoutSize == $extraLarge {
		@media screen and (min-width:$largeToXLBreak) { @content; }
	} @else {
		@media screen { @content; }
	}
}

//
// Defines styles for row and column widths for a given layout size
//
// @param $layoutSize {string} name of layout size (s, m , l, xl)
// @param $maxWidth {number} maximum width of a row at this layout size
//
@mixin defineResponsiveGrid ($layoutSize, $maxWidth) {

	@include respondTo($layoutSize) {
		
		@if ($isFluid and not ($layoutSize == $extraLarge)) {
			.#{$gridRow} {
				max-width: none;
			}
		} @else {
			@if ($maxWidth) {
				.#{$gridRow} {
					max-width: $maxWidth;
				}
			}
		}

		[class*="-#{$layoutSize}hide"],
		[class*="-#{$layoutSize}0"] {
			display: none;
		}

		$selector: null;			

		@for $colWidth from 1 through 11 {

			$thisSelector: #{'[class*="-#{$layoutSize}#{$colWidth}"]'};
			
			#{$thisSelector} {
				width: gridColumnWidth($colWidth);
			}
			
			// generates a comma separated selector for each of the column widths from 1 to 11
			@if ($selector) {
				$selector: append($selector, $thisSelector, comma);
			} @else {
				$selector: $thisSelector;
			}
			
		}
		
		@if ($layoutSize != d) {
			/* ensures d12 and d0 can be over-ridden by styles for #{$layoutSize} layout */
			#{$selector} {
				float: left;
				clear: none;
				display: block;	
			}
		}

		[class*="-#{$layoutSize}12"]{
		    float: none;
		    clear: both;
			width: 100%;
		}

	}
}
