@mixin oGridTargetAtFixedLayout ($include-unwrapped: false) {
	@if ($include-unwrapped or (not $o-grid-fixed-layout-selector and not $o-grid-fixed-layout-useragents)) {
		@content;
	}
	@if ($o-grid-fixed-layout-selector) {
		#{$o-grid-fixed-layout-selector} {
			@content;
		}		
	} @else if ($o-grid-fixed-layout-useragents) {
		@include oUseragentTarget ($o-grid-fixed-layout-useragents) {
			@content;
		}	
	} 
}

//
// Writes media query selector for given maximum and minimum screen widths
//
// @param $min {string|null} min-width for media query
// @param $max {string|null} max-width for media query
// @param $force {boolean} [false] if set to true will then if $min and $max are undefined it will write out the styles wrapped in @media screen, otherwise writes nothing
//
@mixin oGridMaxMinMediaQuery($min, $max, $force:false) {
	@if ($min and $max) {
		@media screen and (min-#{$o-grid-mq-type}:$min+1) and (max-#{$o-grid-mq-type}:$max) { @content; }
	} @else if ($min) {
		@media screen and (min-#{$o-grid-mq-type}:$min+1) { @content; }
	} @else if ($max) {
		@media screen and  (max-#{$o-grid-mq-type}:$max) { @content; }
	} @else if ($force) {
		@media screen { @content; }
	}
}

// Add cross-browser box-sizing attribute
@mixin oGridBoxSizing($value, $polyfill: false) {
	-moz-box-sizing: $value;
	box-sizing: $value;
	@if ($polyfill) {
		@include oUseragentIe7BoxSizing();		
	}
}

//
// Writes media query selector for a given layout size
//
// @param $layout-sizes {string|list} name[s] of layout size[s] (s, m , l, xl)
//
@mixin oGridRespondTo ($layout-sizes) {

	@each $layout-size in $layout-sizes {
		@if $layout-size == s {
			@include oGridMaxMinMediaQuery(null, $o-grid-small-to-medium-break) { @content; }
		} @else if $layout-size == m {
			@include oGridMaxMinMediaQuery($o-grid-small-to-medium-break, $o-grid-medium-to-large-break) { @content; }
		} @else if $layout-size == l {
			@include oGridMaxMinMediaQuery($o-grid-medium-to-large-break, $o-grid-large-to-extra-large-break) { @content; }
		} @else if $layout-size == xl {
			@include oGridMaxMinMediaQuery($o-grid-large-to-extra-large-break, null) { @content; }
		} @else {
			@include oGridMaxMinMediaQuery(null, null, true) { @content; }
		}
	}
}

//
// Defines styles for row and column widths for a given layout size
//
// @param $layout-size {string} name of layout size (s, m , l, xl)
// @param $maxWidth {number} maximum width of a row at this layout size
//
@mixin oGridDefineLayout ($layout-size, $max-width) {

	@include oGridRespondTo($layout-size) {
		
		@if ($o-grid-is-fluid and not ($layout-size == xl)) {
			.o-grid-row,
			.o-grid-page {
				max-width: none;
			}
		} @else {
			@if ($max-width) {
				.o-grid-row,
				.o-grid-page {
					max-width: $max-width;
				}
			}
		}

		@include oGridGutterOverrides($layout-size);
		
		@include oGridColumnWidths($layout-size, 12);
	}
}

@function oGridColumnSelector ($layout-size: null, $colspans: null) {

	$selector: null;

	@if not $layout-size {
		$selector: #{'[data-o-grid-colspan]'};
	} @else {
		$prefix: $layout-size;

		@if ($layout-size == default) {
			$prefix: "";
		} 

		@each $colspan in $colspans {

			$selector: append($selector, #{'[data-o-grid-colspan~="#{$prefix}#{$colspan}"]'}, comma);
			$selector: append($selector, #{'%o-grid-colspan-#{$prefix}#{$colspan}'}, comma);
		}		
	} 
	
	@return $selector;
}

@mixin oGridColumnSelector ($layout-size: null, $colspan: null) {
	#{oGridColumnSelector($layout-size, $colspan)} { 
		@content 
	}
}

//
// Defines styles for column widths for a given layout size
//
// @param $layout-size {string} name of layout size (s, m , l, xl)
//
@mixin oGridColumnWidths($layout-size, $column-count, $default: false) {

	@include oGridColumnSelector($layout-size, hide 0) {
		display: none;
	}


	$aggregated-selector: null;			
	$column-count-minus-one: $column-count - 1;

	@for $colspan from 1 through $column-count-minus-one {

		@include oGridColumnSelector($layout-size, $colspan) {
			@if ($default) {
				width: oGridColumnWidthMinusGutter($colspan, $column-count, $o-grid-default-half-gutter);
			} @else {
				width: oGridColumnWidth($colspan, $column-count);
			}
			
		}
		
		$aggregated-selector: append($aggregated-selector, oGridColumnSelector($layout-size, $colspan), comma);
	}
	
	@if (not $default and $layout-size != default) {
		/* ensures d12 and d0 can be over-ridden by styles for #{$layout-size} layout */
		#{$aggregated-selector} {
			float: left;
			clear: none;
			display: block;	
		}
	}
	@include oGridColumnSelector($layout-size, $column-count) {
	    float: none;
	    clear: both;
		@if ($default) {
			width: oGridColumnWidthMinusGutter($column-count, $column-count, $o-grid-default-half-gutter);
		} @else {
			width: 100%;
		}
	}
}



@mixin oGridFixedGridStyles () {
	.o-grid-row .o-grid-row,
	.o-grid-box .o-grid-row {
		margin-left: -$o-grid-fixed-half-gutter;
		margin-right: -$o-grid-fixed-half-gutter;
		width: auto;
	}

	@include oGridColumnSelector() {
		float: left;
		padding-left: $o-grid-fixed-half-gutter;
		padding-right: $o-grid-fixed-half-gutter;
		@include oGridBoxSizing(border-box, true);
	}

	@include oGridCompactStyles(false);

	@include oGridColumnWidths(default, 12);
	@include oGridColumnWidths(l, 12);

	.o-grid-row,
	.o-grid-page {
		width: $o-grid-large-max-width;
		max-width: none; // must be 'none' rather than $o-grid-large-max-width in order to avoid a very obscure ie7 bug
	}
	
	@include oGridColumnSelector(s, 12) {
		clear: none;
	}
	
	@include oGridGutterOverrides(l, true);
}

@mixin oGridGutterOverrides ($layout-sizes, $include-default: false) {

	@each $layout in $layout-sizes {
		%o-grid-no-gutter-#{$layout},
		%o-grid-no-left-gutter-#{$layout} {
			padding-left: 0;

			&> .o-grid-row {
				margin-left: 0;
			}
		}

		%o-grid-no-gutter-#{$layout},
		%o-grid-no-right-gutter-#{$layout} {
			padding-right: 0;

			&> .o-grid-row {
				margin-right: 0;
			}
		}
	}

	@if ($include-default) {
		%o-grid-no-gutter,
		%o-grid-no-left-gutter {
			padding-left: 0;

			&> .o-grid-row {
				margin-left: 0;
			}
		}

		%o-grid-no-gutter,
		%o-grid-no-right-gutter {
			padding-right: 0;

			&> .o-grid-row {
				margin-right: 0;
			}
		}		
	}

}

@mixin oGridOverrideDefaultGrid () {
	@include oGridColumnSelector(s, 0 hide) {
	    display: block;
	}

	@include oGridColumnSelector(s, 12) {
	    clear: none;
	}

	$aggregated-selector: null;			

	@for $colWidth from 0 through 12 {

		// generates a comma separated selector for each of the column widths from 1 to 11
		$aggregated-selector: append($aggregated-selector, oGridColumnSelector(s, $colWidth), comma);
		
	}

	#{$aggregated-selector} {
		width: auto;
	}
}

@mixin oGridCompactStyles ($wrapped: false) {
	.o-grid-row-compact > [class*="o-grid-col"] {
		padding-left: 0;
		padding-right: 0;
	}

	@if ($wrapped) {
		@include oGridTargetAtFixedLayout(true) {
			.o-grid-row.o-grid-row-compact,
			.o-grid-row .o-grid-row.o-grid-row-compact {
				margin-left: 0;
				margin-right: 0;
			}
		}	
	} @else {
		.o-grid-row.o-grid-row-compact,
		.o-grid-row .o-grid-row.o-grid-row-compact {
			margin-left: 0;
			margin-right: 0;
		}		
	}


}

